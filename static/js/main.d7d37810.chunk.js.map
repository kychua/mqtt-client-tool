{"version":3,"sources":["Connection.js","Publisher.js","Messages.js","App.js","serviceWorker.js","index.js"],"names":["Connection","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","host","port","isConnected","isAutoDisconnected","isInputError","setConnectionState","bind","assertThisInitialized","onHostChange","onPortChange","isConnect","console","log","connect","disconnect","event","setState","target","value","_this2","_this$state","_this$props","statusDetails","react_default","a","createElement","class","for","id","type","readOnly","onChange","aria-describedby","onClick","React","Component","Publisher","topic","content","onInputChange","publishMessage","property","defineProperty","message","Paho","Message","destinationName","publishErrorMessage","disabled","toDoubleDigit","number","Messages","messages","map","_ref","timestamp","Date","getHours","getMinutes","getSeconds","num","join","getPrettyTime","App","client","handleConnectionSuccess","handleConnectionFailure","handleConnectionLost","Client","Number","onConnectionLost","error","onMessageArrived","msg","handleMessageArrived","onSuccess","onFailure","subscribe","errorMessage","messageEntry","payloadString","now","concat","toConsumableArray","send","className","src_Connection_0","src_Publisher","src_Messages_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7d37810.chunk.js","sourcesContent":["import React from 'react';\nimport './Connection.css';\nimport Paho from 'paho-mqtt';\n\nclass Connection extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      host: 'localhost',\n      port: '15675',\n      isConnected: this.props.isConnected,\n      isAutoDisconnected: false,\n      isInputError: false,\n    };\n    this.setConnectionState = this.setConnectionState.bind(this);\n    this.onHostChange = this.onHostChange.bind(this);\n    this.onPortChange = this.onPortChange.bind(this);\n  }\n\n  setConnectionState(isConnect) {\n    console.log(\"Submitted!\")\n    if (isConnect) {\n        this.props.connect(this.state.host, this.state.port);\n    } else {\n        this.props.disconnect();\n    }\n  }\n\n  onHostChange(event) {\n    this.setState({host: event.target.value});\n  }\n\n  onPortChange(event) {\n    // check for input error, must be number\n    this.setState({port: event.target.value});\n  }\n \n  render() {\n    const { \n      host,\n      port\n    } = this.state;\n    const {\n        isConnected,\n        statusDetails,\n    } = this.props;\n    console.log(this.props);\n    return (\n        <div class=\"container py-2 bg-light border rounded\">\n            <div class=\"form-group row\">\n                <label for=\"basic-url\" class=\"col-sm-auto col-form-label\">Host</label>\n                <div class=\"col-sm\">\n                    <input\n                        class=\"form-control\"\n                        id=\"basic-url\"\n                        type=\"text\" \n                        value={host} \n                        readOnly={isConnected} \n                        onChange={this.onHostChange}/>\n                </div>            \n                <label for=\"basic-url\" class=\"col-sm-auto col-form-label\">Port</label>\n                <div class=\"col-sm-2\">\n                    <input \n                        type=\"number\" \n                        class=\"form-control\" \n                        id=\"basic-url\" \n                        value={port} \n                        readOnly={isConnected} \n                        onChange={this.onPortChange}\n                        aria-describedby=\"basic-addon3\"/>\n                </div>\n            </div>\n            <div class=\"form-group row\">\n              <div class=\"col-md-auto\">\n                <div class={\"circle pl-1 \" + (isConnected? \"connected\" : \"disconnected\")}></div>\n              </div>\n                <div class=\"col-md no-left-padding\">\n                  <input \n                    type=\"text\"\n                    class=\"form-control-plaintext\"\n                    value={statusDetails}\n                    readOnly\n                  />\n                </div>\n                <div class=\"col-md-auto\">\n                    <button \n                        class=\"btn btn-primary\" \n                        onClick={() => this.setConnectionState(!isConnected)}>\n                        {isConnected ? \"Disconnect\" : \"Connect\"}\n                    </button>\n                </div>\n            </div>\n            </div>\n    //     <Row>\n    //         <label>Host</label>\n    //         <InputGroup className=\"mb-3\">\n    //             <Form.Control \n    //                 id=\"basic-url\" \n    //                 aria-describedby=\"basic-addon3\" \n    //                 value={host} \n    //                 type=\"text\" \n    //                 placeholder=\"Enter host\" \n    //                 readOnly={isConnected} \n    //                 onChange={this.onHostChange}/>\n    //         </InputGroup>\n    //     </Row>\n    //   <Form>\n    //     <Form.Row>\n    //         <Form.Group as={Col} controlId=\"formGridHost\">\n    //         <Form.Label>Host</Form.Label>\n    //         <Form.Control value={host} type=\"text\" placeholder=\"Enter host\" readOnly={isConnected} onChange={this.onHostChange}/>\n    //         </Form.Group>\n\n    //         <Form.Group as={Col} controlId=\"formGridPort\">\n    //         <Form.Label>Port</Form.Label>\n    //         <Form.Control value={port} type=\"number\" placeholder=\"Enter port\" readOnly={isConnected} onChange={this.onPortChange}/>\n    //         </Form.Group>\n    //     </Form.Row>\n    //     <Form.Row>\n    //         <Col><div id=\"connectionStatus\">{statusDetails}</div></Col>\n    //         <Col>          \n    //             <Button variant=\"primary\" type=\"submit\" onClick={() => this.setConnectionState(!isConnected)}>\n    //                 { isConnected ? \"Disconnect\" : \"Connect\" }        \n    //             </Button>\n    //         </Col>\n    //     </Form.Row>\n    //     </Form>\n    );\n  }\n}\n\nexport default Connection;","import React from 'react';\nimport './App.css';\nimport Paho from 'paho-mqtt';\n\nclass Publisher extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            topic: '',\n            content: '',\n        };\n\n        this.onInputChange = this.onInputChange.bind(this);\n        this.publishMessage = this.publishMessage.bind(this);\n    }\n\n    onInputChange(property, event) {\n        this.setState({[property]: event.target.value});\n    }\n\n    publishMessage() {\n        const message = new Paho.Message(this.state.content);\n        message.destinationName = this.state.topic;\n        this.props.publishMessage(message);\n    }\n\n    render() {\n            const { \n              topic,\n              content,\n            } = this.state;\n            return (\n                <div class=\"container py-2 my-2 bg-light border rounded\">\n                    <div class=\"form-group row\">\n                        <label for=\"basic-url\" class=\"col-sm-2 col-form-label\">Topic</label>\n                        <div class=\"col-sm\">\n                        <input\n                            class=\"form-control\"\n                            id=\"basic-url\"\n                            type=\"text\" \n                            value={topic} \n                            onChange={(event) => this.onInputChange('topic', event)}\n                            readOnly={!this.props.isConnected}    \n                        />\n                        </div>\n                </div>\n                <div class=\"form-group row\">\n                   <label for=\"basic-url\" class=\"col-sm-2 col-form-label\">Message</label>\n                    <div class=\"col-sm\">\n                        <textarea \n                            class=\"form-control\"\n                            id=\"basic-url\" \n                            value={content} \n                            onChange={(event) => this.onInputChange('content', event)}\n                            readOnly={!this.props.isConnected}    \n                        ></textarea>\n                    </div>\n                </div>\n                <div class=\"form-group row\">\n                    <div class=\"col\">{this.props.publishErrorMessage}</div>\n                    <div class=\"col-md-auto\">\n                        <button \n                            class=\"btn btn-primary\" \n                            onClick={this.publishMessage}\n                            disabled={!this.props.isConnected}>\n                            Publish\n                        </button>\n                    </div>\n                </div>\n                </div>\n            );\n          }\n\n    }\n\nexport default Publisher;","import React from 'react';\nimport './Messages.css';\n\nclass Messages extends React.Component {\n    render() {\n        return (\n            <div class=\"container border rounded mb-2\">\n                <span>Received messages</span>\n                {this.props.messages.map(({topic, content, timestamp}) =>\n                <div class=\"row my-1 pr-3\">\n                    <div class=\"col-md-auto text-muted timestamp\">\n                        {getPrettyTime(timestamp)}\n                    </div>\n                    <div class=\"col-md-4 border bg-light hide-overflow rounded-left\">\n                        {topic}\n                    </div>\n                    <div class=\"col-md border hide-overflow rounded-right \">\n                        {content}\n                    </div>\n                </div>\n                // <div>\n                //     <div class=\"row\">\n                //     <div class=\"col-md-3 text-muted text-center timestamp\">\n                //         {getPrettyTime(timestamp)} {getPrettyDate(timestamp)}\n                //     </div>\n                //     <div class=\"col-md hide-overflow\">{topic}</div>\n                // </div>\n                // <div class=\"row\">\n                //     <div class=\"col-md-3 text-muted text-center timestamp\">\n                //     </div>\n                //     <div class=\"col-md-9 hide-overflow\">{content}</div>\n                // </div>\n                // </div>\n                )}\n            </div>\n        );\n    }\n}\n\nfunction toDoubleDigit(number) {\n    return number < 10 ? \"0\" + number : number;\n}\n\nfunction prettifyTimestamp(timestamp) {\n    timestamp = new Date(timestamp);\n    const  date = [timestamp.getDate(), timestamp.getMonth() + 1, timestamp.getFullYear() - 2000].join(\"/\");   \n    const time = [timestamp.getHours(), timestamp.getMinutes(), timestamp.getSeconds()].map(num => toDoubleDigit(num)).join(\":\");\n    return time + \" \" + date;\n}\n\nfunction getPrettyTime(timestamp) {\n    timestamp = new Date(timestamp);\n    const time = [timestamp.getHours(), timestamp.getMinutes(), timestamp.getSeconds()].map(num => toDoubleDigit(num)).join(\":\");\n    return time;\n}\n\nfunction getPrettyDate(timestamp) {\n    timestamp = new Date(timestamp);\n    const  date = [timestamp.getDate(), timestamp.getMonth() + 1, timestamp.getFullYear() - 2000].join(\"/\");   \n    return date;\n}\n\nexport default Messages;","import React from 'react';\nimport './App.css';\nimport Paho from 'paho-mqtt';\nimport Connection from './Connection';\nimport Publisher from './Publisher';\nimport Messages from './Messages';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      isConnected: false,\n      statusDetails: 'Disconnected',\n      messages: [],\n      publishErrorMessage: '',\n    };\n    this.client = null;\n\n    this.handleConnectionSuccess = this.handleConnectionSuccess.bind(this);\n    this.handleConnectionFailure = this.handleConnectionFailure.bind(this);\n    this.handleConnectionLost = this.handleConnectionLost.bind(this);\n    this.connect = this.connect.bind(this);\n    this.disconnect = this.disconnect.bind(this);\n    this.publishMessage = this.publishMessage.bind(this);\n  }\n\n  connect(host, port) {\n    this.client = new Paho.Client(host, Number(port), \"/ws\", \"clientId\");\n    this.client.onConnectionLost = (error) => this.handleConnectionLost(error);\n    this.client.onMessageArrived = (msg) => this.handleMessageArrived(msg);\n    this.client.connect({\n      onSuccess: this.handleConnectionSuccess,\n      onFailure: this.handleConnectionFailure,\n    });\n\n  }\n\n  disconnect() {\n    this.client.disconnect();\n    this.setState({\n      isConnected: false,\n      statusDetails: 'Disconnected',\n    })\n\n  }\n\n  handleConnectionSuccess() {\n    console.log(\"Connected!\");\n    this.client.subscribe(\"#\");\n    this.setState({\n      isConnected: true,\n      statusDetails: 'Connected',\n    });      \n  }\n\n  handleConnectionFailure(error) {\n    console.log(\"Connection failed!\");\n    this.setState({\n      isConnected: false,\n      statusDetails: 'Connection failed: ' + error.errorMessage,\n    });\n  }\n\n  handleConnectionLost(error) {\n    console.log(\"Connection lost!\", error);\n    this.setState({\n      isConnected: false,\n      statusDetails: 'Connection lost: ' + error.errorMessage,\n    });\n  }\n\n  handleMessageArrived(message) { \n    console.log(\"Received:\", message);\n    const messageEntry = {\n      topic: message.destinationName,\n      content: message.payloadString,\n      timestamp: Date.now(),\n    }\n    this.setState({\n      messages: [messageEntry, ...this.state.messages]\n    });\n  }\n\n  publishMessage(message) {\n    try {\n      this.client.send(message);\n      this.setState({publishErrorMessage: ''});\n    } catch (error) {\n      this.setState({publishErrorMessage: 'Error: ' + error.message});\n    }\n  }\n \n  render() {\n    const { \n      isConnected,\n      statusDetails,\n      messages,\n      publishErrorMessage,\n    } = this.state;\n    return (\n      <div className=\"App\">\n        <div class=\"pb-2 pt-2 mb-2 border-bottom bg-secondary text-light\">\n          <div class=\"container\">\n            <h3>MQTT Client Tool</h3>\n          </div>\n        </div>\n        <Connection\n         isConnected={isConnected}\n         statusDetails={statusDetails}\n         connect={this.connect}\n         disconnect={this.disconnect}></Connection>\n         <Publisher\n          publishMessage={this.publishMessage}\n          publishErrorMessage={publishErrorMessage}\n          isConnected={isConnected}></Publisher>\n          <Messages\n          messages={messages}></Messages>\n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap/dist/css/bootstrap.min.css';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif (module.hot) {\n    module.hot.accept();\n}\n  \n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}